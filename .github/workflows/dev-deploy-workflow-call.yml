name: "[dev] Deploy workflow call"
run-name: "[dev] Deploy workflow call"

on:
    workflow_call:
        inputs:
            environment:
                description: 'environment'
                required: true
                type: string
            EB_APPLICATION_NAME:
                description: 'Elastic Beanstalk application name'
                required: true
                type: string
            EB_ENVIRONMENT_NAME:
                description: 'Elastic Beanstalk environment name'
                required: true
                type: string
            APP_MODULE:
                description: 'Application module'
                required: true
                type: string
            APP_MODULE_PATH:
                description: 'Application module path'
                required: true
                type: string
            APP_GENERATE_OPENAPI:
                description: 'Generate Openapi3 '
                required: true
                type: string


jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Set up JDK 21
                uses: actions/setup-java@v3
                with:
                    java-version: '21'
                    distribution: 'temurin'

            -   name: Cache Gradle packages
                uses: actions/cache@v3
                with:
                    path: ~/.gradle/caches
                    key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
                    restore-keys: ${{ runner.os }}-gradle

            -   name: Build with Gradle
                if: ${{ !inputs.APP_GENERATE_OPENAPI }}    # APP_GENERATE_OPENAPI false일 때만 실행
                run: |
                    ./gradlew ${{ inputs.APP_MODULE }}:clean
                    ./gradlew ${{ inputs.APP_MODULE }}:build -x test

            -   name: Generate openapi3
                if: ${{ inputs.APP_GENERATE_OPENAPI }}     # APP_GENERATE_OPENAPI true일 때만 실행
                run: |
                    ./gradlew ${{ inputs.APP_MODULE }}:clean
                    ./gradlew ${{ inputs.APP_MODULE }}:openapi3
                    ./gradlew ${{ inputs.APP_MODULE }}:build -x test

            -   name: Generate deployment package
                run: |
                    mkdir -p deploy
                    cp ${{ inputs.APP_MODULE_PATH }}/build/libs/*-SNAPSHOT.jar deploy/application.jar
                    cp ${{ inputs.APP_MODULE_PATH }}/launch-${{ inputs.environment }}.sh deploy/launch.sh
                    cp ${{ inputs.APP_MODULE_PATH }}/Procfile deploy/Procfile
                    cp -r ${{ inputs.APP_MODULE_PATH }}/.ebextensions/${{ inputs.environment }} deploy/.ebextensions
                    cd deploy && zip -r deploy.zip .

            -   name: Generate version
                id: generate_version
                run: |
                    # Get the latest tag
                    latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

                    # 현재 timestamp를 추가하여 유니크한 버전 생성
                    timestamp=$(date +%Y%m%d%H%M%S)

                    # Extract major, minor, patch versions
                    IFS='.' read -r major minor patch <<< "${latest_tag#v}"

                    # Generate new version with timestamp
                    new_version="v$major.$minor.$patch-${GITHUB_SHA::7}-$timestamp"

                    echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT
                    echo "New version: $new_version"

            -   name: Deploy to EB
                uses: einaregilsson/beanstalk-deploy@v22
                with:
                    aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    application_name: ${{ inputs.EB_APPLICATION_NAME }}
                    environment_name: ${{ inputs.EB_ENVIRONMENT_NAME }}
                    version_label: ${{ steps.generate_version.outputs.NEW_VERSION }}
                    region: ${{ secrets.AWS_REGION }}
                    deployment_package: deploy/deploy.zip
                    wait_for_deployment: 60

#      - name: Create Git tag
#        run: |
#          git config user.name github-actions
#          git config user.email github-actions@github.com
#          git tag ${{ steps.generate_version.outputs.NEW_VERSION }}
#          git push origin ${{ steps.generate_version.outputs.NEW_VERSION }}
